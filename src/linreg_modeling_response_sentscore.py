'''
This script is for modeling the backers' comment sentiment scores with delay responses.
It reads the input data with the delay responses and the averaged sentiment scores after
1 year of comments. Those are generated by other python scripts, "comment_sentiment_analysis.py".
It uses the linear regression model to see which responses affect to the backers' sentiments.
'''
import pandas as pd
import numpy as np
import seaborn as sns
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.preprocessing import StandardScaler

def create_tech_tag_col(row, tech_tags):
    tag_list = eval(row)
    tech = int(0)
    for tag in tag_list:
        if tag in tech_tags:
            tech = int(1)

    return tech

def calculate_vif(X, thresh=10.0):
    dropped = True
    while dropped:
        variables = X.columns
        dropped = False
        vif = [variance_inflation_factor(X[variables].values, X.columns.get_loc(var)) for var in X.columns]
        print(X.columns)
        print(vif)
        max_vif = max(vif)
        if max_vif > thresh:
            maxloc = vif.index(max_vif)
            X = X.drop([X.columns.tolist()[maxloc]], axis=1)
            dropped = True
    return X

    
def fit_linreg_model(x, y, interaction, df, vif, write_filename):
    X = df[x]
    X = calculate_vif(X)

    if interaction == None:
        formula ='{}~{}'.format(y, '+'.join(X.columns))

    else:
        formula = '{}~{}+{}'.format(y, '+'.join(X.columns), '+'.join(interaction))


    model = smf.ols(formula=formula, data=df).fit()
    with open("temp_result/{}.csv".format(write_filename), "w") as fh:
        fh.write(model.summary().as_csv())


def resp_type_corr(response_df, col_list):
    # model linear regression to predict response types based on comment sentiment
    corr_result = np.corrcoef(response_df[col_list], rowvar=False)

    return corr_result

def plot_variable_distr(df, colname_list):
    for colname in colname_list:
        sns.distplot(df[colname])
        plt.title("Distribution of {}".format(colname))
        plt.savefig("../plots/{}_distr.png".format(colname))
        plt.close()



if __name__ == "__main__":

    response_df = pd.read_csv('temp_data/rf_predictions_ntree128_md32_delay_response_success.csv')

    general_info_df = pd.read_csv("../dataset/project_general_info.csv")

    tech_tags = ["headphones", "bluetooth", "earbuds", "security", "wireless", "vr", "arduino", "software", "e-bikes", "computers", "cars", "apps", "air purifiers", "smart home", "iot", "smart phones", "batteries", "pc", "iphone", "solar", "3d printers", "smart watches", "laptops", "mouse", "3d", "keyboards", "chargers", "robots", "mobile apps", "drones", "sensor"]
    general_info_df["tech_tag"] = general_info_df["tags"].apply(create_tech_tag_col, args=[tech_tags])

    # join response_df and general_info_df
    response_df = pd.merge(response_df, general_info_df[['projectID','initial_funding','initial_backers','current_funding','current_backers', 'tech_tag']], left_on='projectid', right_on='projectID', how='left')
    # save the merged file to csv file
    # response_df.to_csv("temp_data/rf_predictions_ntree128_md32_delay_response_merged.csv", index=False)
    
    response_df = response_df.dropna(subset=['response_apology', 'response_promise', 'response_ignore', 'response_transparency', 'gender', \
            'initial_funding', 'initial_backers', 'tech_tag', 'comment_sent_score'])
    response_df.reset_index(drop=True, inplace=True)
    response_df = response_df[['projectid', 'response_apology', 'response_promise', 'response_ignore', 'response_transparency', 'gender', \
            'initial_funding', 'initial_backers','tech_tag', 'comment_sent_score']]

    avg_funding_per_backer = response_df['initial_funding'] / response_df['initial_backers']
    response_df = response_df.assign(avg_funding_per_backer = avg_funding_per_backer)

    plot_variable_distr(response_df, ["initial_funding", "initial_backers", "comment_sent_score", "avg_funding_per_backer"])


    # log transformation
    response_df['log_initial_funding'] = np.log(response_df['initial_funding']+1)
    response_df['log_initial_backers'] = np.log(response_df['initial_backers']+1)
    response_df['log_avg_funding_per_backer'] = np.log(response_df['avg_funding_per_backer']+1)
    response_df['log_comment_sent_score'] = np.log(response_df['comment_sent_score']+1)

    # change "gender" to categorical dummy variables
    gender_dummy = pd.get_dummies(response_df.gender)
    response_df['team'] = gender_dummy['team']
    response_df['male'] = gender_dummy['male']
    response_df['female'] = gender_dummy['female']

    # define variable names
    iv_colnames = ['response_apology', 'response_promise', 'response_ignore', 'response_transparency']
    # cv_colnames = ['log_initial_backers', 'log_initial_funding', 'tech_tag']
    cv_colnames = ['log_avg_funding_per_backer', 'tech_tag']
    dv_colname = "log_comment_sent_score"

    # set column types
    response_df['response_apology'] = response_df.response_apology.astype(int)
    response_df['response_promise'] = response_df.response_promise.astype(int)
    response_df['response_ignore'] = response_df.response_ignore.astype(int)
    response_df['response_transparency'] = response_df.response_transparency.astype(int)
    response_df['team'] = response_df.team.astype(int)
    response_df['male'] = response_df.male.astype(int)
    response_df['tech_tag'] = response_df.tech_tag.astype(int)

    # Standardize
    X = np.array(response_df[['log_avg_funding_per_backer', 'log_initial_funding', 'log_initial_backers']])
    scaler = StandardScaler()
    scaled_X = scaler.fit_transform(X)
    
    response_scaled_df = response_df.copy()
    response_scaled_df[['log_avg_funding_per_backer', 'log_initial_funding', 'log_initial_backers']] = scaled_X

    # correlation matrix
    corr_matrix = response_scaled_df[iv_colnames + ["log_initial_backers", "log_initial_funding"] + cv_colnames + ["team", "male"]].corr()
    corr_matrix.to_csv("temp_result/modeling_variable_corr_matrix.csv")

    # Modeling for predicting comment sentiment scores based on various independent variables and control variables
    print('Model 0a: DV vs. initial funding + initial_backers + tech tags')
    fit_linreg_model(['log_initial_funding', 'log_initial_backers', 'tech_tag'], dv_colname, None, response_scaled_df, True, "model0a_CV->comment_sent.csv")

    print('Model0b: DV vs. avg_funding_per_backer + tech tags')
    fit_linreg_model(['log_avg_funding_per_backer', 'tech_tag'], dv_colname, None, response_scaled_df, True, "model0b_CV->comment_sent.csv")


    print('Model 1-1: DV vs. Control + response_apology')
    fit_linreg_model(["response_apology"] + cv_colnames, dv_colname, \
                    None, response_scaled_df, True, "model1-1_apology+control->comment_sent.csv")

    print("Model 1-2: DV vs. Control + response_promise")
    fit_linreg_model(["response_promise"] + cv_colnames, dv_colname, \
            None, response_scaled_df, True, "model1-2_promise+control->comment_sent.csv")

    print("Model 1-3: DV vs. Control + response_ignore")
    fit_linreg_model(["response_ignore"] + cv_colnames, dv_colname, \
            None, response_scaled_df, True, "model1-3_ignore+control->comment_sent.csv")

    print("Model 1-4: DV vs. Control + response_transparency")
    fit_linreg_model(["response_transparency"] + cv_colnames, dv_colname, \
            None, response_scaled_df, True, "model1-4_transparency+control->comment_sent.csv")

    print("Model 1-5: DV vs. Control + IV(team&male)")
    fit_linreg_model(iv_colnames + ["team", "male"] + cv_colnames, dv_colname, \
            None, response_scaled_df, True, "model1-5_IV+team+male+control->comment_sent.csv")

    print("Model 2: DV vs. Control + IV(team)")
    fit_linreg_model(iv_colnames + ["team"] + cv_colnames, dv_colname, \
            None, response_scaled_df, True, "model2_IV+team+control->comment_sent.csv")

    print("Model 3: DV vs. Control + IV(male)")
    response_scaled_gender_df = response_df.loc[(response_df["male"] == 1) | (response_df["female"] == 1)]
    fit_linreg_model(iv_colnames + ["male"] + cv_colnames, dv_colname, \
            None, response_scaled_gender_df, True, "model3_IV+male+control->comment_sent.csv")

    print("Model 4-1: DV vs. Control + IV(team) + promise*team")
    fit_linreg_model(iv_colnames + ["team"] + cv_colnames, dv_colname, \
            ["response_promise:team"], response_scaled_df, True, "model4-1_IV+team+promise:team+control->comment_sent.csv")

    print("Model 4-2: DV vs. Control + IV(male) + promise*male")
    fit_linreg_model(iv_colnames + ["male"] + cv_colnames, dv_colname, \
            ["response_promise:male"], response_scaled_gender_df, True, "model4-2_IV+male+promise:team+control->comment_sent.csv")

    print("Model5-1: DV vs. Control + IV(team) + transparency:team")
    fit_linreg_model(iv_colnames + ["team"] + cv_colnames, dv_colname, \
            ["response_transparency:team"], response_scaled_df, True, "model5-1_IV+team+transparency:team+control->comment_sent.csv")

    print("Model 5-2: DV vs. Control + IV(male) + transparency*male")
    fit_linreg_model(iv_colnames + ["male"] + cv_colnames, dv_colname, \
            ["response_transparency:male"], response_scaled_gender_df, True, "model5-2_IV+male+transparency:team+control->comment_sent.csv")

    print("Model 6-1: DV vs. Control + apology + apology*team")
    fit_linreg_model(["response_apology"] + cv_colnames, dv_colname, \
            ["response_apology:team"], response_scaled_df, True, "model6-1_apology+apology:team+control->comment_sent.csv")

    print("Model 6-2: DV vs. Control + apology + apology*male")
    fit_linreg_model(["response_apology"] + cv_colnames, dv_colname, \
            ["response_apology:male"], response_scaled_gender_df, True, "model6-2_apology+apology:male+control->comment_sent.csv")

    print("Model 7-1: DV vs. Control + ignore + ignore*team")
    fit_linreg_model(["response_ignore"] + cv_colnames, dv_colname, \
            ["response_ignore:team"], response_scaled_df, True, "model7-1_ignore+ignore:team+control->comment_sent.csv")

    print("Model 7-2: DV vs. Control + ignore + ignore*male")
    fit_linreg_model(["response_ignore"] + cv_colnames, dv_colname, \
            ["response_ignore:male"], response_scaled_gender_df, True, "model7-2_ignore+ignore:male+control->comment_sent.csv")

